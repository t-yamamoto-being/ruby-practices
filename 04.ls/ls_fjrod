#!/usr/bin/env ruby

require 'optparse'

class OptionParserHandler
  attr_reader :options

  def initialize
    @options = {}
    parse_options
  end

  private

  def parse_options
    OptionParser.new do |opts|
      opts.on('-a', '--all') do
        @options[:all] = true
      end

      opts.on('-r', '--reverse') do
        @options[:reverse] = true
      end
    end.parse!
  end
end

class ListSegments
  # items = files and dirs

  MAX_COLS = 3.to_f

  def initialize(show_all: false, sort_reverse: false)
    @items = Dir.entries('.').reject { |item| !show_all && item.start_with?('.') }.sort
    @items.reverse! if sort_reverse
  end

  def display_items
    shape_and_display
  end

  private

  def shape_and_display
    # split and sort by cols
    max_rows = (@items.length / MAX_COLS).ceil
    cols = @items.each_slice(max_rows).to_a
    ## case cols are missing
    cols.each { |col| col.fill('', col.length...max_rows) }

    cols.transpose.each do |row|
      puts row.map { |item| dir_colorize(item) }.join(' ')
    end
  end

  def dir_colorize(item)
    aligned_item = item.ljust(20)
    File.directory?(item) ? "\e[34m#{aligned_item}\e[0m" : aligned_item # output dir.name with blue
  end
end

option_handler = OptionParserHandler.new
ListSegments.new(
  show_all: option_handler.options[:all],
  sort_reverse: option_handler.options[:reverse]
).display_items
